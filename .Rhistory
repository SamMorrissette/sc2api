valid_token()
set_token(get_token('682ecd9436104308bba69c57070f168d','FtVlgaC9MWbLrSidioUKA5EddJcfWmAw'))
get_token('682ecd9436104308bba69c57070f168d','FtVlgaC9MWbLrSidioUKA5EddJcfWmAw')
valid_token()
valid_token("US04SQYZcjkU9wkiIMl7z6nf7MgxLz3KxN")
get_token('682ecd9436104308bba69c57070f168d','FtVlgaC9MWbLrSidioUKA5EdJcfWmAw')
set_token(12345)
devtools::load_all()
valid_token()
remove_token
remove_token()
valid_token()
profile_ladder(1,1,1,1)
profile_ladder("us",1,1,1)
devtools::load_all()
profile_ladder("us",1,1,1)
devtools::document()
devtools::document()
?get_token
?valid_token
?authentication
devtools::load_all()
?get_token
devtools::document()
?authentication
?authentication
devtools::document()
?authentication
?remove_token
devtools::document()
?get_token
devtools::load_all()
valid_token()
valid_token(1234)
id = '682ecd9436104308bba69c57070f168d'
secret = 'FtVlgaC9MWbLrSidioUKA5EddJcfWmAw'
get_token(id,secret)
valid_token(get_token(id,secret))
valid_token("US04SQYZcjkU9wkiIMl7z6nf7MgxLz3KxN")
devtools::load_all()
valid_token("US04SQYZcjkU9wkiIMl7z6nf7MgxLz3KxN")
valid_token()
set_token("US04SQYZcjkU9wkiIMl7z6nf7MgxLz3KxN")
valid_token()
devtools::load_all()
devtools::document()
?authentication
devtools::document()
?authentication
devtools::document()
devtools::document()
?authentication
devtools::document()
?authentication
?plot
devtools::document()
?authentication
?Sys.setenv
devtools::document()
devtools::document()
?authenticate
?authentication
devtools::document()
?authentication
devtools::document()
?authentication
devtools::document()
devtools::document()
?authentication
devtools::document()
?authentication
devtools::document()
?authentication
devtools::document()
?authentication
devtools::document()
?authentication
?string_extract
library(tidyverse)
?string_extract
?str_detect
?string_extract
?str_extract
devtools::document()
?authentication
devtools::document()
devtools::load_all()
devtools::document()
?profile.ladder_summary
?profile.ladder_summary()
devtools::document()
?blizzard
devtools::document()
devtools::load_all()
devtools::document()
?blizzard
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::document()
?blizzarfd
?blizzard
devtools::document()
?blizzard
devtools::document()
?blizzard
devtools::document()
?blizzard
devtools::document()
?blizzard
devtools::document()
devtools::load_all()
devtools::document()
?blizzard
devtools::document()
devtools::document()
?blizzard
MASS::abbey
devtools::document()
?blizzard
devtools::document()
?blizzard
?set_token
?profile_profile
devtools::document()
?blizzard
valid_token()
ladder_gm_leaderboard("cn")
devtools::document()
?blizzard
?authentication
?blizzard
df
library(tidyverse)
df <- data.frame(league=c(),
tier=c(),
rating = c(),
race = c(),
wins=c(),
losses=c(),
played_race_count=c(),
battle_tag=c(),
last_played=c(),
path=c()
)
for (i in 0:6) {
#i indicates a unique league (i.e. bronze, silver, etc.)
leagues <- league_data(44,201,0,i) #API CALL
tiers <- length(leagues$tier)
for (j in 1:tiers) {
#j indiciates a tier (i.e. bronze 1, bronze 2, bronze 3, etc.)
num_ladders <- length(leagues$tier[[j]]$division) #Number of unique divisions (i.e. ladders)
for (k in 1:num_ladders) {
print(paste("League:", i, "Tier:", j, "Ladder #:", k))
ladder_id = leagues$tier[[j]]$division[[k]]$ladder_id
players = ladder_data(ladder_id) #API CALL
league=i
tier=j
ratings = sapply(players$team, function(x) x$rating)
races = sapply(players$team, function(x) x$member[[1]]$played_race_count[[1]]$race$en_US) #Is this correct?
wins =  sapply(players$team, function(x) x$wins)
losses =  sapply(players$team, function(x) x$losses)
played_race_count = sapply(players$team, function(x) x$member[[1]]$played_race_count[[1]]$count)
battle_tag = sapply(players$team, function(x) {
if(is.null(x$member[[1]]$character_link$battle_tag)) {
return("000")
} else {
x$member[[1]]$character_link$battle_tag
}
})
last_played <- sapply(players$team, function(x) x$last_played_time_stamp)
path = sapply(players$team, function(x) {
if(is.null(x$member[[1]]$legacy_link$path)) {
return("000")
} else {
x$member[[1]]$legacy_link$path
}
})
new.data <- data.frame(league,tier,ratings,races,wins,losses,played_race_count,battle_tag,last_played,path)
df <- rbind(df,new.data)
Sys.sleep(0.02)
}
}
}
df$display_name <- str_extract(df$path,'([^/]+$)')
df <- df[order(-df$ratings),]
df$last_played_human <- as.POSIXct(df$last_played, origin="1970-01-01")
df$races <- as.factor(df$races)
filtered_df <- df[df$played_race_count>=10 & df$last_played_human >= (Sys.Date()-60) &
df$races!='Random',]
ggplot(filtered_df,aes(x=ratings)) +
geom_density(aes(y=..density..,group=races,colour=races),adjust=1.5,lwd=1) +
scale_color_manual(values=c('Orange','Blue','Red')) +
theme_light()
filtered_df %>% group_by(races) %>% summarize(median(ratings))
library(tidyverse)
df <- data.frame(league=c(),
tier=c(),
rating = c(),
race = c(),
wins=c(),
losses=c(),
played_race_count=c(),
battle_tag=c(),
last_played=c(),
path=c()
)
for (i in 0:6) {
#i indicates a unique league (i.e. bronze, silver, etc.)
leagues <- league_data(44,201,0,i) #API CALL
tiers <- length(leagues$tier)
for (j in 1:tiers) {
#j indiciates a tier (i.e. bronze 1, bronze 2, bronze 3, etc.)
num_ladders <- length(leagues$tier[[j]]$division) #Number of unique divisions (i.e. ladders)
for (k in 1:num_ladders) {
print(paste("League:", i, "Tier:", j, "Ladder #:", k))
ladder_id = leagues$tier[[j]]$division[[k]]$ladder_id
players = ladder_data(ladder_id) #API CALL
league=i
tier=j
ratings = sapply(players$team, function(x) x$rating)
races = sapply(players$team, function(x) x$member[[1]]$played_race_count[[1]]$race$en_US) #Is this correct?
wins =  sapply(players$team, function(x) x$wins)
losses =  sapply(players$team, function(x) x$losses)
played_race_count = sapply(players$team, function(x) x$member[[1]]$played_race_count[[1]]$count)
battle_tag = sapply(players$team, function(x) {
if(is.null(x$member[[1]]$character_link$battle_tag)) {
return("000")
} else {
x$member[[1]]$character_link$battle_tag
}
})
last_played <- sapply(players$team, function(x) x$last_played_time_stamp)
path = sapply(players$team, function(x) {
if(is.null(x$member[[1]]$legacy_link$path)) {
return("000")
} else {
x$member[[1]]$legacy_link$path
}
})
new.data <- data.frame(league,tier,ratings,races,wins,losses,played_race_count,battle_tag,last_played,path)
df <- rbind(df,new.data)
Sys.sleep(0.02)
}
}
}
library(tidyverse)
df <- data.frame(league=c(),
tier=c(),
rating = c(),
race = c(),
wins=c(),
losses=c(),
played_race_count=c(),
battle_tag=c(),
last_played=c(),
path=c()
)
for (i in 0:6) {
#i indicates a unique league (i.e. bronze, silver, etc.)
leagues <- league_get_league_data(44,201,0,i) #API CALL
tiers <- length(leagues$tier)
for (j in 1:tiers) {
#j indiciates a tier (i.e. bronze 1, bronze 2, bronze 3, etc.)
num_ladders <- length(leagues$tier[[j]]$division) #Number of unique divisions (i.e. ladders)
for (k in 1:num_ladders) {
print(paste("League:", i, "Tier:", j, "Ladder #:", k))
ladder_id = leagues$tier[[j]]$division[[k]]$ladder_id
players = ladder_data(ladder_id) #API CALL
league=i
tier=j
ratings = sapply(players$team, function(x) x$rating)
races = sapply(players$team, function(x) x$member[[1]]$played_race_count[[1]]$race$en_US) #Is this correct?
wins =  sapply(players$team, function(x) x$wins)
losses =  sapply(players$team, function(x) x$losses)
played_race_count = sapply(players$team, function(x) x$member[[1]]$played_race_count[[1]]$count)
battle_tag = sapply(players$team, function(x) {
if(is.null(x$member[[1]]$character_link$battle_tag)) {
return("000")
} else {
x$member[[1]]$character_link$battle_tag
}
})
last_played <- sapply(players$team, function(x) x$last_played_time_stamp)
path = sapply(players$team, function(x) {
if(is.null(x$member[[1]]$legacy_link$path)) {
return("000")
} else {
x$member[[1]]$legacy_link$path
}
})
new.data <- data.frame(league,tier,ratings,races,wins,losses,played_race_count,battle_tag,last_played,path)
df <- rbind(df,new.data)
Sys.sleep(0.02)
}
}
}
df$display_name <- str_extract(df$path,'([^/]+$)')
df <- df[order(-df$ratings),]
df$last_played_human <- as.POSIXct(df$last_played, origin="1970-01-01")
df$races <- as.factor(df$races)
filtered_df <- df[df$played_race_count>=10 & df$last_played_human >= (Sys.Date()-60) &
df$races!='Random',]
ggplot(filtered_df,aes(x=ratings)) +
geom_density(aes(y=..density..,group=races,colour=races),adjust=1.5,lwd=1) +
scale_color_manual(values=c('Orange','Blue','Red')) +
theme_light()
filtered_df %>% group_by(races) %>% summarize(median(ratings))
?blizzard
?stringr
?stringi
devtools::document()
?profile_static
devtools::document()
?stringr
?profile_static
devtools::document()
?profile_static
devtools::document()
?profile_static
profile_static("eu")
static <- profile_static("us")
static
static <- profile_static("eu")
static
static1 <- profile_static("us")
static2 <- profile_static("eu")
all.equal(static1,static2)
all.equal(static1,static2,profile_static("kr"))
all.equal(static1,profile_static("kr"))
devtools::document()
?profile_static
devtools::load_all()
devtools::document()
?profile_static
?str_extract
?ggplot
?data.frame
?density
density(5,kernel=c("gaussian",""epanechnikov""))
density(5,kernel=c("gaussian","epanechnikov"))
devtools::load_all()
profile_static()
profile_static("u")
devtools::load_all()
devtools::document()
?profile_static
devtools::document()
?profile_static
devtools::document()
?profile_static
?profile_metadata
devtools::document()
?profile_static
devtools::document()
?profile_static
?profile_metadata
devtools::document()
?profile_static
devtools::document()
devtools::document()
?profile_metadata
devtools::document()
?profile_metadata
devtools::document()
?profile_metadata
profile_metadata(1,1,2435)
devtools::load_all()
profile_metadata(1,1,2435)
devtools::load_all()
profile_metadata(1,1,2435)
devtools::load_all()
profile_metadata(1,1,2435)
devtools::load_all()
profile_metadata(1,1,2435)
profile_metadata(1,1,24355)
players
profile_metadata(1,1,9803116)
profile_metadata(1,1,702387)
devtools::load_all()
profile_profile(1,1,702387)
data <- profile_metadata(1,1,702387)
data <- profile_profile(1,1,702387)
data$summary
data$snapshot
data$campaign
data$career
devtools::document()
?profile_profile
devtools::load_all()
data <- profile_ladder_summary(1,1,702387)
data$allLadderMemberships
data$showCaseEntries
data$placementMatches
devtools::document()
?profile_ladder_summary
data <- profile_ladder_summary(1,1,4511)
data <- profile_ladder_summary(1,2,4511)
data
data <- profile_ladder(1,1,702387)
devtools::load_all
devtools::load_all()
data <- profile_ladder(1,1,702387)
data <- profile_ladder_summary(1,1,702387)
data$allLadderMemberships
data <- profile_ladder(1,1,702387,292132)
data
data$league
data$localizedDivision
data$ladderTeams
data$localizedDivision
data$league
data$currentLadderMembership
data$ranksAndPools
data$ladderTeams
data$allLadderMemberships
data$currentLadderMembership
data$allLadderMemberships
data$ladderTeams
data$league
data$ranksAndPools
data$ladderTeams[[59]]
ladder_gm_leaderboard(1)
ladder_gm_leaderboard("us")
devtools::load_all()
ladder_gm_leaderboard(1)
devtools::document()
?ladder_gm_leaderboard
devtools::load_all()
ladder_season(1)
devtools:;document()
devtools::document()
?ladder_season
account_player(702387)
library(yourpackage)
?ladder_season
?authentication
Sys.getenv('BLIZZ_TOKEN')
getid = '682ecd9436104308bba69c57070f168d'
secret = 'FtVlgaC9MWbLrSidioUKA5EddJcfWmAw'
set.token(getid,secret)
devtools::load_all()
set.token(getid,secret)
set_token(getid,secret)
set_token(get_token(getid,secret))
valid_token()
url <- paste0('https://us.battle.net/oauth/userinfo')
request <- httr::GET(url,
httr::add_headers(Authorization = paste('Bearer', Sys.getenv('BLIZZ_TOKEN'))))
if (request$status_code == 200) {
response <- httr::content(request)
return(response)
} else {
stop(paste0("HTTP Error code ", request$status_code,'. Please ensure that you have set a valid authentication using set_token(auth_token)'))
}
Sys.getenv('BLIZZ_TOKEN')
url <- 'https://us.battle.net/oauth/userinfo'
request <- httr::GET(url,
httr::add_headers(Authorization = paste('Bearer', Sys.getenv('BLIZZ_TOKEN'))))
request
paste('Bearer', Sys.getenv('BLIZZ_TOKEN'))
valid_token()
devtools::load_all()
?legacy_profile
devtools::document()
?legacy_profile
data <- legacy_profile(1,1,702387)
data2 <- profile_profile(1,1,702387)
data
data2
all.equal(data,data2)
data2$summary
data2$snapshot
devtools::document()
?legacy_profile
devtools::document()
?legacy_profile
devtools::load
devtools::load_all()
data <- legacy_ladders(1,1,702387)
data$previousSeason
data$showcasePlacement
data2 <- profile_ladder(1,1,702387)
data2 <- profile_ladder_summary(1,1,702387)
devtools::load_all()
data <- legacy_ladder(1,292132)
data$ladderMembers
devtools::document()
?legacy_ladder
devtools::document()
devtools::document()
devtools::document()
?legacy_ladder
devtools::document()
?legacy_achievements
devtools::document()
?ladder_data
i=1
#i indicates a unique league (i.e. bronze, silver, etc.)
leagues <- league_get_league_data(44,201,0,i) #API CALL
leagues
leagues$key
leagues$tier
devtools::document()
?league_get_league_data
?league_get_league_data(1,1,0,2)
league_get_league_data(1,1,0,2)
league_get_league_data(28,201,0,2)
league_get_league_data(27,201,0,2)
devtools::document()
?league_get_league_data(1,1,0,2)
?blizzard
